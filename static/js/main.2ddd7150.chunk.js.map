{"version":3,"sources":["reportWebVitals.ts","api/auth-api.ts","state/app-reducer.ts","Login/Login.tsx","api/tasks-api.ts","utils/errors-utils.ts","state/tasks-reducer.ts","api/todolist-api.ts","state/todo-lists-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","componets/ShowError.tsx","TodoLists/TodoLists.tsx","componets/ProgressBar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","initialState","isLogin","initializedApp","statusApp","error","SET_IS_LOGIN","SET_INITIALIZED","SET_STATUS","isAuthAC","value","type","initializedAppAC","setStatusAppAC","status","setErrorAppAC","Copyright","props","Typography","variant","color","align","Link","href","Date","getFullYear","TaskStatuses","TaskPriorities","theme","createTheme","Login","nav","useNavigate","useSelector","state","app","dispatch","useDispatch","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","onSubmit","event","preventDefault","FormData","currentTarget","a","res","resultCode","messages","console","log","SignInThunkCr","email","password","rememberMe","noValidate","mt","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","FormControlLabel","control","Checkbox","Button","mb","Grid","container","item","xs","tasksAPI","todolistID","title","taskID","put","handleServerAppError","length","handleServerNetworkError","errorMessage","removeTaskAC","taskId","todolistId","addTaskAC","todoId","changeTaskTitleAC","setTasksAC","setTasksStatusAC","taskStatus","todoListsAPI","changeTodolistTitleAC","AddItemForm","React","memo","useState","setTitle","setError","addItem","trim","onChange","e","onKeyPress","charCode","helperText","disabled","todoStatus","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","CircularProgress","size","Todolist","tasks","useEffect","items","catch","message","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","undefined","removeTodolist","map","style","paddingTop","Alert","forwardRef","ref","elevation","ShowError","handleClose","reason","Stack","spacing","width","Snackbar","open","autoHideDuration","onClose","severity","TodoLists","todoLists","navigate","finally","AddTaskThunkCr","changeStatus","action","changeTaskStatusAC","newTitle","payload","entityStatus","UpdateTodoListThunkCr","addTodolist","window","addEventListener","alert","promise","AddTodolistThunkCr","fixed","padding","tl","Paper","ProgressBar","LinearProgress","App","initialized","AppBar","position","Toolbar","edge","aria-label","Menu","path","element","top","textAlign","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ddd7150.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, {AxiosResponse} from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"e5d849e4-d295-4a72-8071-9e5233e43fce\"\n    }\n})\n\n\ntype ResponseType = {\n    id: string\n    email: string\n    login: string\n}\n\nexport type RequestDataType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\nexport type ResponseUserType = {\n    data: {id: number, login: string, email: string}\n    fieldsErrors: []\n    messages: []\n    resultCode: 0\n}\n\nexport type ResponseDataType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport const authAPI = {\n    authMe() {\n        return instance.get<ResponseDataType>(\"auth/me\")\n    },\n    login(data:RequestDataType) {\n        return instance.post<ResponseDataType<RequestDataType>>(\"auth/login\", data)\n    },\n    logout() {\n        return instance.delete<ResponseDataType>(\"auth/login\")\n    },\n}\n","import {authAPI, RequestDataType} from \"../api/auth-api\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: InitialStateType = {\n    isLogin: false,\n    initializedApp: false,\n    statusApp: \"idle\",\n    error: null,\n}\n\n//const's\nconst SET_IS_LOGIN = \"SET_IS_LOGIN\"\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\nconst SET_STATUS = \"SET_STATUS\"\nconst SET_ERROR = \"SET_ERROR\"\n\n\nexport const AppReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_IS_LOGIN: {\n            return {...state, isLogin: action.value}\n        }\n        case SET_INITIALIZED: {\n            return {...state, initializedApp: action.value}\n        }\n        case SET_STATUS: {\n            return {...state, statusApp: action.status}\n        }\n        case \"SET_ERROR\":{\n            return {...state, error: action.error}\n        }\n        default:\n            return state\n    }\n}\n\n\n//actions\nexport const isAuthAC = (value: boolean): IsAuthACType => ({type: SET_IS_LOGIN, value} as const)\nexport const initializedAppAC = (value: boolean): InitializedAppACType => ({type: SET_INITIALIZED, value} as const)\nexport const setStatusAppAC = (status: StatusAppType): SetStatusAppACType => ({type: SET_STATUS, status} as const)\nexport const setErrorAppAC = (error: string | null): SetErrorAppACType => ({type: SET_ERROR, error} as const)\n\n\n//types\ntype IsAuthACType = {\n    type: typeof SET_IS_LOGIN,\n    value: boolean\n}\ntype InitializedAppACType = {\n    type: typeof SET_INITIALIZED,\n    value: boolean\n}\nexport type SetStatusAppACType = {\n    type: typeof SET_STATUS,\n    status: StatusAppType\n}\nexport type SetErrorAppACType = {\n    type: typeof SET_ERROR,\n    error: null | string\n}\n\nexport const SignInThunkCr = (data: any) => async (dispatch: Dispatch) => {\n    const res = await authAPI.login(data)\n    try {\n        if (res.data.resultCode === 0) {\n            dispatch(isAuthAC(true))\n        }else{\n            dispatch(setErrorAppAC(res.data.messages[0]))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const LogoutThunkCr = () => async (dispatch: Dispatch) => {\n    const res = await authAPI.logout()\n    try {\n        dispatch(isAuthAC(false))\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const AuthMeThunkCr = () => async (dispatch: Dispatch) => {\n    const res = await authAPI.authMe()\n    try {\n        if (res.data.resultCode === 0) {\n            dispatch(isAuthAC(true))\n            dispatch(initializedAppAC(true))\n            dispatch(setStatusAppAC(\"succeeded\"))\n        } else {\n            dispatch(setErrorAppAC(res.data.messages[0]))\n            dispatch(setStatusAppAC(\"failed\"))\n            dispatch(initializedAppAC(true))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\ntype ActionsType = IsAuthACType\n    | InitializedAppACType\n    | SetStatusAppACType\n    | SetErrorAppACType\n\ntype InitialStateType = {\n    statusApp: StatusAppType\n    isLogin: boolean\n    initializedApp: boolean\n    error: null | string\n}\n\nexport type StatusAppType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\n","import * as React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Link from \"@mui/material/Link\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport {createTheme, ThemeProvider} from \"@mui/material/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../state/store\";\nimport {useNavigate} from \"react-router-dom\";\nimport {SignInThunkCr} from \"../state/app-reducer\";\n\nfunction Copyright(props: any) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {\"Copyright © \"}\n            <Link color=\"inherit\" href=\"https://mui.com/\">\n                Your Website\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n\nconst theme = createTheme();\n\nexport const Login = () => {\n    const nav = useNavigate()\n    const isLogin = useSelector<AppRootStateType, boolean>(state => state.app.isLogin)\n    const dispatch = useDispatch()\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        // eslint-disable-next-line no-console\n\n        dispatch(SignInThunkCr({\n            email: data.get(\"email\"),\n            password: data.get(\"password\"),\n        }))\n        console.log({\n            email: data.get(\"email\"),\n            password: data.get(\"password\"),\n            rememberMe: data.get(\"rememberMe\"),\n        });\n    };\n\n    if(isLogin){\n        nav(\"/todolists\")\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline/>\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Avatar sx={{m: 1, bgcolor: \"secondary.main\"}}>\n                        <LockOutlinedIcon/>\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{mt: 1}}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox name=\"rememberMe\" color=\"primary\"/>}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{mt: 3, mb: 2}}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\">\n                                    Forgot password?\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link href=\"#\" variant=\"body2\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n                <Copyright sx={{mt: 8, mb: 4}}/>\n            </Container>\n        </ThemeProvider>\n    );\n}\n","import axios from \"axios\";\nimport {StatusAppType} from \"../state/app-reducer\";\n\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1//todo-lists/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"e5d849e4-d295-4a72-8071-9e5233e43fce\"\n    }\n})\n\n\nexport interface ITaskType  {\n    addedDate: string,\n    deadline: null,\n    description: null,\n    id: string,\n    order: number,\n    priority: number,\n    startDate: null,\n    status: number,\n    title: string,\n    todoListId: string,\n    completed: boolean,\n}\n\ninterface UpdateTaskType {\n    title: string\n    description: string\n    completed:boolean\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\ntype ItemType = {\n    item: ITaskType\n}\n\ntype CreateTaskType<T = {}> = {\n    data: T\n    fieldsErrors: Array<string>\n    messages: Array<string>\n    resultCode: number\n}\n\ninterface ResponseType {\n    error: null\n    items: Array<ITaskType>\n    totalCount: number\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport const tasksAPI = {\n    getTasks(todolistID: string) {\n        return instance.get<ResponseType>(`${todolistID}/tasks`)\n    },\n    createTasks(todolistID: string, title: string) {\n        return instance.post<CreateTaskType<ItemType>>(`${todolistID}/tasks`, {title})\n    },\n    deleteTasks(todolistID: string, taskID: string) {\n        return instance.delete<CreateTaskType>(`${todolistID}/tasks/${taskID}`)\n    },\n    updateTasks(todolistID: string, taskID: string, title: string) {\n        return instance.put<CreateTaskType>(`${todolistID}/tasks/${taskID}`, {title})\n    }\n}\n\n\n\n","import {ResponseTodolistType} from \"../api/todolist-api\";\nimport {setErrorAppAC, setStatusAppAC} from \"../state/app-reducer\";\nimport {AppDispatch} from \"../state/store\";\n\nexport const handleServerAppError = (data:ResponseTodolistType,dispatch: AppDispatch) => {\n    if(data.messages.length){\n        dispatch(setErrorAppAC(data.messages[0]))\n        dispatch(setStatusAppAC(\"failed\"))\n    } else {\n        dispatch(setErrorAppAC(\"Some error\"))\n        dispatch(setStatusAppAC(\"failed\"))\n    }\n}\n\n\nexport const handleServerNetworkError = (errorMessage: string, dispatch: AppDispatch) => {\n    dispatch(setErrorAppAC(errorMessage))\n    dispatch(setStatusAppAC(\"failed\"))\n}\n","import {AddTodolistActionType, RemoveTodolistActionType} from \"./todo-lists-reducer\";\r\nimport {ITaskType, tasksAPI, TaskStatuses} from \"../api/tasks-api\";\r\nimport {setStatusAppAC, StatusAppType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errors-utils\";\r\nimport {AppDispatch, AppRootStateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.data.todoListId]: [{...action.data, taskStatus: \"idle\"}, ...state[action.data.todoListId]]\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n            };\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            };\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.data.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {...state, [action.todoId]: action.data.map(t => ({...t, taskStatus: \"idle\"}))}\r\n        }\r\n        case \"SET-TASK_STATUS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    taskStatus: action.taskStatus\r\n                } : t)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (data: ITaskType, todoId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", data, todoId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (data: Array<ITaskType>, todoId: string): SetTasksActionType => {\r\n    return {type: \"SET-TASKS\", data, todoId}\r\n}\r\nexport const setTasksStatusAC = (taskStatus: StatusAppType, todoId: string, taskId: string): SetTaskStatusActionType => {\r\n    return {type: \"SET-TASK_STATUS\", taskStatus, todoId, taskId}\r\n}\r\n\r\n\r\nexport const GetTasksThunkCr = (todoId: string): ThunkTaskType => async (dispatch: AppDispatch) => {\r\n    await tasksAPI.getTasks(todoId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todoId))\r\n        })\r\n\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const AddTaskThunkCr = (todoId: string, title: string): ThunkTaskType => async (dispatch: AppDispatch) => {\r\n    await dispatch(setStatusAppAC(\"loading\"))\r\n    tasksAPI.createTasks(todoId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item, todoId))\r\n                dispatch(setStatusAppAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n        dispatch(setStatusAppAC(\"succeeded\"))\r\n    })\r\n}\r\nexport const UpdateTaskTitleThunkCr = (taskId: string, title: string, todoId: string): ThunkTaskType => async (dispatch: AppDispatch): Promise<any> => {\r\n    dispatch(setStatusAppAC(\"loading\"))\r\n    await tasksAPI.updateTasks(todoId, taskId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskTitleAC(taskId, title, todoId))\r\n                dispatch(setStatusAppAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const RemoveTaskThunkCr = (todoId: string, taskId: string): ThunkTaskType => async (dispatch: AppDispatch) => {\r\n    dispatch(setStatusAppAC(\"loading\"))\r\n    dispatch(setTasksStatusAC(\"loading\", todoId, taskId))\r\n    await tasksAPI.deleteTasks(todoId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todoId))\r\n                dispatch(setStatusAppAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\n\r\n//thunks type\r\ntype ThunkTaskType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\n\r\n//types\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\",\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: \"ADD-TASK\",\r\n    data: ITaskType\r\n    todoId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\",\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\",\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: \"SET-TASKS\",\r\n    data: Array<ITaskType>\r\n    todoId: string\r\n}\r\nexport type SetTaskStatusActionType = {\r\n    type: \"SET-TASK_STATUS\",\r\n    taskStatus: StatusAppType\r\n    todoId: string\r\n    taskId: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTasksActionType\r\n    | SetTaskStatusActionType\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<ITasksType>\r\n}\r\n\r\nexport interface ITasksType extends ITaskType {\r\n    taskStatus: StatusAppType\r\n}\r\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"e5d849e4-d295-4a72-8071-9e5233e43fce\"\n    }\n})\n\n\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\n\ntype ItemType = {\n    item: TodolistType\n}\n\nexport type ResponseTodolistType<T = {}> = {\n    data: T\n    fieldsErrors: Array<string>\n    messages: Array<string>\n    resultCode: number\n}\n\n\nexport const todoListsAPI = {\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseTodolistType<ItemType>>(\"todo-lists\", {title})\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseTodolistType>(`todo-lists/${id}`)\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<ResponseTodolistType<ItemType>>(`todo-lists/${id}`, {title})\n    }\n}\n\n\n\n","import {todoListsAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {setStatusAppAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errors-utils\";\r\nimport {AppDispatch, AppRootStateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{...action.data, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.data.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        case \"CHANGE_STATUS\": {\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                entityStatus: action.payload.entityStatus\r\n            } : tl)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\r\n}\r\nexport const addTodolistAC = (data: TodolistType): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", data}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter}\r\n}\r\nexport const setTodolistsAC = (data: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: \"SET-TODOLISTS\", data}\r\n}\r\nexport const changeTodolistEntityStatusAC = (payload: { todolistId: string, entityStatus: TodolistStatus }): ChangeTodolistEntityStatusActionType => ({\r\n    type: \"CHANGE_STATUS\",\r\n    payload\r\n} as const)\r\n\r\n\r\nexport const GetTodoListsThunkCr = (): ThunkTodoType => async (dispatch: AppDispatch) => {\r\n    dispatch(setStatusAppAC(\"loading\"))\r\n    await todoListsAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const AddTodolistThunkCr = (title: string): ThunkTodoType => async (dispatch: AppDispatch) => {\r\n    dispatch(setStatusAppAC(\"loading\"))\r\n    const res = await todoListsAPI.createTodolist(title)\r\n    try {\r\n        /* .then((res) => {*/\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n    /*      .catch((error) => {\r\n              handleServerNetworkError(error.message, dispatch)\r\n          })\r\n          .finally(() => {\r\n              dispatch(setStatusAppAC(\"succeeded\"))\r\n          })*/\r\n    window.addEventListener('unhandledrejection', function(event) {\r\n        alert(event.promise); // [object Promise] - промис, который сгенерировал ошибку\r\n        alert(event.reason); // Error: Ошибка! - объект ошибки, которая не была обработана\r\n    });\r\n}\r\n\r\nexport const RemoveTodoListThunkCr = (todoId: string): ThunkTodoType => async (dispatch: AppDispatch) => {\r\n    dispatch(setStatusAppAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: todoId, entityStatus: \"loading\"}))\r\n    await todoListsAPI.deleteTodolist(todoId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todoId))\r\n                dispatch(setStatusAppAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const UpdateTodoListThunkCr = (title: string, todoId: string): ThunkTodoType => async (dispatch: AppDispatch) => {\r\n    dispatch(setStatusAppAC(\"loading\"))\r\n    await todoListsAPI.updateTodolist(todoId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todoId, title))\r\n                dispatch(setStatusAppAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusAppAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\n\r\n//types thunks\r\ntype ThunkTodoType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\n//types\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\",\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\",\r\n    data: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: \"SET-TODOLISTS\",\r\n    data: Array<TodolistType>\r\n}\r\n\r\nexport type ChangeTodolistEntityStatusActionType = {\r\n    type: \"CHANGE_STATUS\",\r\n    payload: {\r\n        todolistId: string,\r\n        entityStatus: TodolistStatus\r\n    }\r\n}\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistStatus = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: TodolistStatus\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {TodolistStatus} from \"./state/todo-lists-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    todoStatus?: TodolistStatus\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.todoStatus === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.todoStatus === \"loading\"}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            setEditMode(false);\r\n            props.onChange(title);\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onChange={changeTitle}\r\n                     autoFocus onBlur={activateViewMode}\r\n                     onKeyPress={onKeyPressHandler}\r\n        />\r\n        : <span onDoubleClick={props.disabled ? () => {\r\n        } : activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from \"react\"\r\nimport {EditableSpan} from \"./EditableSpan\"\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport {ITaskType, TaskStatuses} from \"./api/tasks-api\";\r\nimport {StatusAppType} from \"./state/app-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ITaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    taskStatus?: StatusAppType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.taskStatus === \"loading\"}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}  disabled={props.taskStatus === \"loading\"}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.taskStatus === \"loading\"}>\r\n            <Delete/>\r\n        </IconButton>\r\n        {props.taskStatus === \"loading\" && <CircularProgress size={\"15px\"}/>}\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from \"react\"\r\nimport {AddItemForm} from \"./AddItemForm\"\r\nimport {EditableSpan} from \"./EditableSpan\"\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"./Task\"\r\nimport {FilterValuesType, TodolistStatus} from \"./state/todo-lists-reducer\";\r\nimport {TaskStatuses} from \"./api/tasks-api\";\r\nimport {GetTasksThunkCr, ITasksType} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    todoStatus: TodolistStatus\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const tasks = useSelector<AppRootStateType, Array<ITasksType>>(state => state.tasks[props.id])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(GetTasksThunkCr(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    if (tasks === undefined) {\r\n        return <Box sx={{display: \"flex\"}}>\r\n            <CircularProgress size={\"30px\"}/>\r\n        </Box>\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.todoStatus === \"loading\"}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todoStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} todoStatus={props.todoStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                taskStatus={t.taskStatus!}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color={\"inherit\"}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color={\"primary\"}>Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={\"secondary\"}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React from \"react\"\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../state/store\";\nimport {setErrorAppAC} from \"../state/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nexport const ShowError = () => {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        dispatch(setErrorAppAC(null))\n    };\n\n    return (\n        <Stack spacing={2} sx={{width: \"30%\"}}>\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: \"100%\"}}>\n                    {error}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    );\n}\n","import React, {useCallback, useEffect} from \"react\";\nimport {AddTaskThunkCr, changeTaskStatusAC, RemoveTaskThunkCr, UpdateTaskTitleThunkCr} from \"../state/tasks-reducer\";\nimport {TaskStatuses} from \"../api/tasks-api\";\nimport {\n    AddTodolistThunkCr,\n    changeTodolistFilterAC,\n    FilterValuesType,\n    GetTodoListsThunkCr,\n    RemoveTodoListThunkCr,\n    TodolistDomainType,\n    UpdateTodoListThunkCr\n} from \"../state/todo-lists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../state/store\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport {AddItemForm} from \"../AddItemForm\";\nimport Paper from \"@mui/material/Paper\";\nimport {Todolist} from \"../Todolist\";\nimport {useNavigate} from \"react-router-dom\";\nimport {ShowError} from \"../componets/ShowError\";\n\n\nexport const TodoLists =  React.memo( () => {\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\n    const initialized = useSelector<AppRootStateType, boolean>(state => state.app.initializedApp)\n    const isLogin = useSelector<AppRootStateType, boolean>(state => state.app.isLogin)\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch();\n    const navigate = useNavigate()\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        dispatch(RemoveTaskThunkCr(todolistId, id));\n    }, []);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        dispatch(AddTaskThunkCr(todolistId, title));\n    }, []);\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const action = changeTaskStatusAC(id, status, todolistId);\n        dispatch(action);\n    }, []);\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        dispatch(UpdateTaskTitleThunkCr(id, newTitle, todolistId));\n    }, []);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value);\n        dispatch(action);\n    }, []);\n\n    const removeTodolist = useCallback(function (id: string) {\n        dispatch(RemoveTodoListThunkCr(id));\n    }, []);\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        dispatch(UpdateTodoListThunkCr(title, id));\n    }, []);\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(AddTodolistThunkCr(title));\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (!isLogin) {\n            navigate(\"/login\")\n        }\n        dispatch(GetTodoListsThunkCr())\n    }, [])\n\n\n    if (!isLogin) {\n        navigate(\"/login\")\n    }\n\n\n    return <div>\n        <Container fixed>\n            <Grid container style={{padding: \"20px\"}}>\n                <AddItemForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {\n                    todoLists.map(tl => {\n                        return <Grid item key={tl.id}>\n                            <Paper style={{padding: \"10px\"}}>\n                                <Todolist\n                                    id={tl.id}\n                                    title={tl.title}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    filter={tl.filter}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                    todoStatus={tl.entityStatus}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                }\n            </Grid>\n        </Container>\n        {error && <ShowError/>}\n    </div>\n})\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nexport const ProgressBar = () => {\n    return (\n        <Box sx={{ width: '100%' }}>\n            <LinearProgress />\n        </Box>\n    );\n}\n","import React, {useEffect} from \"react\"\r\nimport \"./App.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Login} from \"./Login/Login\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {TodoLists} from \"./TodoLists/TodoLists\";\r\nimport {AuthMeThunkCr, LogoutThunkCr, StatusAppType} from \"./state/app-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {ProgressBar} from \"./componets/ProgressBar\";\r\n\r\n\r\nfunction App() {\r\n    const initialized = useSelector<AppRootStateType, boolean>(state => state.app.initializedApp)\r\n    const isLogin = useSelector<AppRootStateType, boolean>(state => state.app.isLogin)\r\n    const status = useSelector<AppRootStateType, StatusAppType>(state => state.app.statusApp)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMeThunkCr())\r\n    }, [])\r\n\r\n    if (!initialized) {\r\n        return <div\r\n            style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(LogoutThunkCr())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLogin && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                <div className={\"progressBar\"}>\r\n                    {status === \"loading\" && <ProgressBar/>}\r\n                </div>\r\n            </AppBar>\r\n            <Routes>\r\n                <Route path={\"/\"} element={<TodoLists/>}/>\r\n                <Route path={\"/todolists\"} element={<TodoLists/>}/>\r\n                <Route path={\"/login\"} element={<Login/>}/>\r\n                <Route path={\"404\"} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n            </Routes>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListsReducer} from \"./todo-lists-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport {AppReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: AppReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof store.getState>\r\n// Inferred type: {tasks: tasksReducer, todoLists: todoListsReducer, app: AppReducer}\r\nexport type AppDispatch = typeof store.dispatch\r\n// определить автоматически тип всего объекта состояния\r\n//export type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}