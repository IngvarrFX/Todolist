{"version":3,"sources":["components/Input.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","edit","setEdit","onBlur","callback","autoFocus","onDoubleClick","Todolist","updateTodolistTitle","id","removeTodolist","tasks","map","t","isDone","type","newIsDoneValue","checked","changeTaskStatus","updateTask","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","taskId","changeStatus","find","todolist","tl","newId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.44e233f5.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {deflate} from 'zlib';\n\n\ntype InputPropsType = {\n    addTask: (title: string) => void\n\n}\n\nexport const Input = (props: InputPropsType) => {\n\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addTask = () => {\n        let newTitle = title.trim();\n        if (newTitle !== '') {\n            props.addTask(newTitle);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n\n    return (\n        <div>\n            <input value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   className={error ? 'error' : ''}\n            />\n            <button onClick={addTask}>+</button>\n            {error && <div className=\"error-message\">{error}</div>}\n        </div>\n    )\n\n}","import React, {ChangeEvent, useState} from 'react';\n\n\ntype EditableSpanPropsType = {\n    title: string\n    callback: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n    let [edit, setEdit] = useState(false)\n    let [title, setTitle] = useState(props.title)\n    const activateEditMode = () => setEdit(true)\n    const deActivateEditMode = () => {\n        setEdit(false)\n        props.callback(title)\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        edit ?\n            <input value={title}\n                   onBlur={deActivateEditMode}\n                   autoFocus\n                   onChange={onChangeHandler}\n            />\n            :\n            <span\n                onDoubleClick={activateEditMode}\n            >{props.title}</span>\n    )\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Input} from './components/Input';\r\nimport {EditableSpan} from './components/EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTask: (title: string, todolistId: string, taskId: string) => void\r\n    updateTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} callback={(title) => props.updateTodolistTitle(title, props.id)}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <div>\r\n\r\n            <Input addTask={(title) => props.addTask(title, props.id)}/>\r\n\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callback={(title) => props.updateTask(title, props.id, t.id)}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {Input} from './components/Input';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'React Book', isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const updateTask = (title: string, todolistId: string, taskId: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(t => t.id === taskId ? {...t, title} : t)})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId];\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        let newId = v1()\r\n        setTodolists([...todolists, {id: newId, title, filter: 'all'}])\r\n        setTasks({...tasks, [newId]: []})\r\n    }\r\n    const updateTodolistTitle = (title: string, todolistId: string) => {\r\n        setTodolists(todolists.map(t => t.id === todolistId ? {...t, title: title} : t))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Input addTask={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === 'active') {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        updateTask={updateTask}\r\n                        updateTodolistTitle={updateTodolistTitle}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}